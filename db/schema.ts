import {
  boolean,
  integer,
  pgEnum,
  pgTable,
  text,
  timestamp,
  uuid
} from "drizzle-orm/pg-core";

export const cardEntityTypeEnum = pgEnum("card-entity-type", ["checklist"])

export const user = pgTable("user", {
  id: text("id").primaryKey(),
  name: text("name").notNull(),
  email: text("email").notNull().unique(),
  emailVerified: boolean("email_verified")
    .$defaultFn(() => false)
    .notNull(),
  image: text("image"),
  createdAt: timestamp("created_at")
    .$defaultFn(() => /* @__PURE__ */ new Date())
    .notNull(),
  updatedAt: timestamp("updated_at")
    .$defaultFn(() => /* @__PURE__ */ new Date())
    .notNull(),
})

export const session = pgTable("session", {
  id: text("id").primaryKey(),
  expiresAt: timestamp("expires_at").notNull(),
  token: text("token").notNull().unique(),
  createdAt: timestamp("created_at").notNull(),
  updatedAt: timestamp("updated_at").notNull(),
  ipAddress: text("ip_address"),
  userAgent: text("user_agent"),
  userId: text("user_id")
    .notNull()
    .references(() => user.id, { onDelete: "cascade" }),
})

export const account = pgTable("account", {
  id: text("id").primaryKey(),
  accountId: text("account_id").notNull(),
  providerId: text("provider_id").notNull(),
  userId: text("user_id")
    .notNull()
    .references(() => user.id, { onDelete: "cascade" }),
  accessToken: text("access_token"),
  refreshToken: text("refresh_token"),
  idToken: text("id_token"),
  accessTokenExpiresAt: timestamp("access_token_expires_at"),
  refreshTokenExpiresAt: timestamp("refresh_token_expires_at"),
  scope: text("scope"),
  password: text("password"),
  createdAt: timestamp("created_at").notNull(),
  updatedAt: timestamp("updated_at").notNull(),
})

export const verification = pgTable("verification", {
  id: text("id").primaryKey(),
  identifier: text("identifier").notNull(),
  value: text("value").notNull(),
  expiresAt: timestamp("expires_at").notNull(),
  createdAt: timestamp("created_at").$defaultFn(
    () => /* @__PURE__ */ new Date(),
  ),
  updatedAt: timestamp("updated_at").$defaultFn(
    () => /* @__PURE__ */ new Date(),
  ),
})

// The above tables were generated by Better-Auth

export const project = pgTable("project", {
  id: uuid("id").primaryKey().defaultRandom(),
  userId: text("user_id").notNull().references(() => user.id, { onDelete: "cascade" }),
  name: text("name").notNull()
})

export const board = pgTable("board", {
  id: uuid("id").primaryKey().defaultRandom(),
  projectId: uuid("project_id").notNull().references(() => project.id, { onDelete: "cascade" }),
  name: text("name").notNull()
})

export const list = pgTable("list", {
  id: uuid("id").primaryKey().defaultRandom(),
  boardId: uuid("board_id").notNull().references(() => board.id, { onDelete: "cascade" }),
  name: text("name").notNull(),
  orderNumber: integer("order_number").notNull()
})

export const card = pgTable("card", {
  id: uuid("id").primaryKey().defaultRandom(),
  listId: uuid("list_id").notNull().references(() => list.id, { onDelete: "cascade" }),
  name: text("name").notNull(),
  description: text("description").notNull().default(""),
  orderNumber: integer("order_number").notNull()
})

export const cardEntity = pgTable("card_entity", {
  id: uuid("id").primaryKey().defaultRandom(),
  cardId: uuid("card_id").notNull().references(() => card.id, { onDelete: "cascade" }),
  type: cardEntityTypeEnum().notNull(),
  orderNumber: integer("order_number").notNull()
})

export const cardChecklist = pgTable("card_checklist", {
  id: uuid("id").primaryKey().defaultRandom(),
  cardEntityId: uuid("card_entity_id").notNull().references(() => cardEntity.id, { onDelete: "cascade" }),
  name: text("name").notNull()
})

export const cardChecklistItem = pgTable("card_checklist_item", {
  id: uuid("id").primaryKey().defaultRandom(),
  cardChecklistId: uuid("card_checklist_id").notNull().references(() => cardChecklist.id, { onDelete: "cascade" }),
  name: text("name").notNull(),
  completed: boolean("completed").notNull().default(false),
  orderNumber: integer("order_number").notNull()
})

export const schema = {
  user,
  session,
  account,
  verification,
  project,
  board,
  list,
  card,
  cardEntity,
  cardChecklist,
  cardChecklistItem
}